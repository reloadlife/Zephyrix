package zephyrix

import (
	"fmt"
	"strings"
)

// redisCommandMap is a map that maps Redis command strings to corresponding Go method names.
// The keys of the map are Redis command strings, and the values are the corresponding Go method names.
var redisCommandMap = map[string]string{
	"APPEND":           "Append",
	"AUTH":             "Auth",
	"BGSAVE":           "BgSave",
	"DEL":              "Del",
	"EXISTS":           "Exists",
	"EXPIRE":           "Expire",
	"FLUSHALL":         "FlushAll",
	"FLUSHDB":          "FlushDB",
	"GET":              "Get",
	"GETSET":           "GetSet",
	"HDEL":             "HDel",
	"HEXISTS":          "HExists",
	"HGET":             "HGet",
	"HGETALL":          "HGetAll",
	"HINCRBY":          "HIncrBy",
	"HKEYS":            "HKeys",
	"HLEN":             "HLen",
	"HMGET":            "HMGet",
	"HMSET":            "HMSet",
	"HSET":             "HSet",
	"HSETNX":           "HSetNX",
	"HVALS":            "HVals",
	"INCR":             "Incr",
	"INCRBY":           "IncrBy",
	"INFO":             "Info",
	"KEYS":             "Keys",
	"LINDEX":           "LIndex",
	"LINSERT":          "LInsert",
	"LLEN":             "LLen",
	"LPOP":             "LPop",
	"LPUSH":            "LPush",
	"LPUSHX":           "LPushX",
	"LRANGE":           "LRange",
	"LREM":             "LRem",
	"LSET":             "LSet",
	"LTRIM":            "LTrim",
	"MGET":             "MGet",
	"MSET":             "MSet",
	"MSETNX":           "MSetNX",
	"MULTI":            "Multi",
	"PERSIST":          "Persist",
	"PING":             "Ping",
	"PSUBSCRIBE":       "PSubscribe",
	"PUBLISH":          "Publish",
	"PUNSUBSCRIBE":     "PUnsubscribe",
	"QUIT":             "Close",
	"RANDOMKEY":        "RandomKey",
	"RENAME":           "Rename",
	"RENAMENX":         "RenameNX",
	"RPOP":             "RPop",
	"RPOPLPUSH":        "RPopLPush",
	"RPUSH":            "RPush",
	"RPUSHX":           "RPushX",
	"SADD":             "SAdd",
	"SCARD":            "SCard",
	"SDIFF":            "SDiff",
	"SDIFFSTORE":       "SDiffStore",
	"SELECT":           "Select",
	"SET":              "Set",
	"SETEX":            "SetEx",
	"SETNX":            "SetNX",
	"SINTER":           "SInter",
	"SINTERSTORE":      "SInterStore",
	"SISMEMBER":        "SIsMember",
	"SMEMBERS":         "SMembers",
	"SMOVE":            "SMove",
	"SORT":             "Sort",
	"SPOP":             "SPop",
	"SRANDMEMBER":      "SRandMember",
	"SREM":             "SRem",
	"STRLEN":           "StrLen",
	"SUBSCRIBE":        "Subscribe",
	"SUNION":           "SUnion",
	"SUNIONSTORE":      "SUnionStore",
	"TTL":              "TTL",
	"TYPE":             "Type",
	"UNSUBSCRIBE":      "Unsubscribe",
	"WATCH":            "Watch",
	"ZADD":             "ZAdd",
	"ZCARD":            "ZCard",
	"ZCOUNT":           "ZCount",
	"ZINCRBY":          "ZIncrBy",
	"ZINTERSTORE":      "ZInterStore",
	"ZRANGE":           "ZRange",
	"ZRANGEBYSCORE":    "ZRangeByScore",
	"ZRANK":            "ZRank",
	"ZREM":             "ZRem",
	"ZREMRANGEBYRANK":  "ZRemRangeByRank",
	"ZREMRANGEBYSCORE": "ZRemRangeByScore",
	"ZREVRANGE":        "ZRevRange",
	"ZREVRANGEBYSCORE": "ZRevRangeByScore",
	"ZREVRANK":         "ZRevRank",
	"ZSCORE":           "ZScore",
	"ZUNIONSTORE":      "ZUnionStore",
}

func (z *zephyrix) printCommandUsage(cmd string) string {
	usageMap := map[string]string{
		"APPEND":           "APPEND key value",
		"AUTH":             "AUTH password",
		"BGSAVE":           "BGSAVE",
		"DEL":              "DEL key [key ...]",
		"EXISTS":           "EXISTS key [key ...]",
		"EXPIRE":           "EXPIRE key seconds",
		"FLUSHALL":         "FLUSHALL",
		"FLUSHDB":          "FLUSHDB",
		"GET":              "GET key",
		"GETSET":           "GETSET key value",
		"HDEL":             "HDEL key field [field ...]",
		"HEXISTS":          "HEXISTS key field",
		"HGET":             "HGET key field",
		"HGETALL":          "HGETALL key",
		"HINCRBY":          "HINCRBY key field increment",
		"HKEYS":            "HKEYS key",
		"HLEN":             "HLEN key",
		"HMGET":            "HMGET key field [field ...]",
		"HMSET":            "HMSET key field value [field value ...]",
		"HSET":             "HSET key field value",
		"HSETNX":           "HSETNX key field value",
		"HVALS":            "HVALS key",
		"INCR":             "INCR key",
		"INCRBY":           "INCRBY key increment",
		"INFO":             "INFO [section]",
		"KEYS":             "KEYS pattern",
		"LINDEX":           "LINDEX key index",
		"LINSERT":          "LINSERT key BEFORE|AFTER pivot value",
		"LLEN":             "LLEN key",
		"LPOP":             "LPOP key",
		"LPUSH":            "LPUSH key value [value ...]",
		"LPUSHX":           "LPUSHX key value",
		"LRANGE":           "LRANGE key start stop",
		"LREM":             "LREM key count value",
		"LSET":             "LSET key index value",
		"LTRIM":            "LTRIM key start stop",
		"MGET":             "MGET key [key ...]",
		"MSET":             "MSET key value [key value ...]",
		"MSETNX":           "MSETNX key value [key value ...]",
		"MULTI":            "MULTI",
		"PERSIST":          "PERSIST key",
		"PING":             "PING [message]",
		"PSUBSCRIBE":       "PSUBSCRIBE pattern [pattern ...]",
		"PUBLISH":          "PUBLISH channel message",
		"PUNSUBSCRIBE":     "PUNSUBSCRIBE [pattern [pattern ...]]",
		"QUIT":             "QUIT",
		"RANDOMKEY":        "RANDOMKEY",
		"RENAME":           "RENAME key newkey",
		"RENAMENX":         "RENAMENX key newkey",
		"RPOP":             "RPOP key",
		"RPOPLPUSH":        "RPOPLPUSH source destination",
		"RPUSH":            "RPUSH key value [value ...]",
		"RPUSHX":           "RPUSHX key value",
		"SADD":             "SADD key member [member ...]",
		"SCARD":            "SCARD key",
		"SDIFF":            "SDIFF key [key ...]",
		"SDIFFSTORE":       "SDIFFSTORE destination key [key ...]",
		"SELECT":           "SELECT index",
		"SET":              "SET key value [EX seconds] [PX milliseconds] [NX|XX]",
		"SETEX":            "SETEX key seconds value",
		"SETNX":            "SETNX key value",
		"SINTER":           "SINTER key [key ...]",
		"SINTERSTORE":      "SINTERSTORE destination key [key ...]",
		"SISMEMBER":        "SISMEMBER key member",
		"SMEMBERS":         "SMEMBERS key",
		"SMOVE":            "SMOVE source destination member",
		"SORT":             "SORT key [BY pattern] [LIMIT offset count] [GET pattern [GET pattern ...]] [ASC|DESC] [ALPHA] [STORE destination]",
		"SPOP":             "SPOP key [count]",
		"SRANDMEMBER":      "SRANDMEMBER key [count]",
		"SREM":             "SREM key member [member ...]",
		"STRLEN":           "STRLEN key",
		"SUBSCRIBE":        "SUBSCRIBE channel [channel ...]",
		"SUNION":           "SUNION key [key ...]",
		"SUNIONSTORE":      "SUNIONSTORE destination key [key ...]",
		"TTL":              "TTL key",
		"TYPE":             "TYPE key",
		"UNSUBSCRIBE":      "UNSUBSCRIBE [channel [channel ...]]",
		"WATCH":            "WATCH key [key ...]",
		"ZADD":             "ZADD key [NX|XX] [CH] [INCR] score member [score member ...]",
		"ZCARD":            "ZCARD key",
		"ZCOUNT":           "ZCOUNT key min max",
		"ZINCRBY":          "ZINCRBY key increment member",
		"ZINTERSTORE":      "ZINTERSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX]",
		"ZRANGE":           "ZRANGE key start stop [WITHSCORES]",
		"ZRANGEBYSCORE":    "ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]",
		"ZRANK":            "ZRANK key member",
		"ZREM":             "ZREM key member [member ...]",
		"ZREMRANGEBYRANK":  "ZREMRANGEBYRANK key start stop",
		"ZREMRANGEBYSCORE": "ZREMRANGEBYSCORE key min max",
		"ZREVRANGE":        "ZREVRANGE key start stop [WITHSCORES]",
		"ZREVRANGEBYSCORE": "ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]",
		"ZREVRANK":         "ZREVRANK key member",
		"ZSCORE":           "ZSCORE key member",
		"ZUNIONSTORE":      "ZUNIONSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX]",
	}

	usage, ok := usageMap[strings.ToUpper(cmd)]
	if ok {
		return fmt.Sprintf("Usage: %s\n", usage)
	} else {
		return fmt.Sprintf("No usage information available for command: %s\n", cmd)
	}
}
